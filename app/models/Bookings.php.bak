<?php
/*
 * Bookings Class parses order arrays for varios booking reports
 */
class Bookings {
    function __construct( ) {
        
    }
    /*
     * Fitler to sort csv output
     */
    private function cmpOrderItems( $row1, $row2 ) {
        
        if( $row1['BookingDate'] == $row2['BookingDate'] ) {
            return( $row1['id'] >= $row2['id'] ? 1 : -1);
        } else {
            return( $row1['BookingDate'] >= $row2['BookingDate'] ? 1 : -1);
        }
    }

    private function formatPhoneNumber( $num ) {
        //first strip all the non-digit characters from the input
        $num = preg_replace("/[^0-9]+/", "", $num);
    
        //and only then re-format the phone-number   
        if(!empty($num)){
          $first=  substr($num, 0, 3)."-";
          $second= substr($num,3,3)."-";
          $third=substr($num,6,4);
          $num=$first.$second.$third;
        }
        return $num;
    }
    /*
     * Get the information we want from meta.
     */
    public function getMetaDetail($metas) {
        $myMeta = array();
        // Set Defaults
        $myMeta['Adults'] = 0;
        $myMeta['Children'] = 0;
        $myMeta['BookingDate'] = "01/01/2016";

        // meta data is stored with key, value as "keys"
        foreach($metas as $meta) {
            //echo "<p>" . json_encode($meta) . "</p>";
            switch ($meta['key']) {
                case 'Booking Date':
                        $myMeta['BookingDate'] = $meta['value'];
                    break;
                case 'Adults':
                case 'Persons':
                        $myMeta['Adults'] = intval($meta['value']);
                    break;
                case 'Children':
                        $myMeta['Children'] = intval($meta['value']);
                    break;
            }
        }
        return($myMeta);
    }

    /*
     * Get the information we want from line items.
     * Generally a singel item but can be more.
     * Combine ROD rental w/charter booking
     */
    public function getLineItemsDetail($lineItems) {
        $myItems = array();
        $i = 0;
        foreach ($lineItems as $item) {
            /* We may have more than one line_item */
            if('ROD' == $item['sku']) {
                if(0 == $i) {
                    $j = 0;
                } else {
                    $j = $i -1;
                }
                $myItems[$j]['rods']  += intval($item['quantity']);
                $myItems[$j]['total'] += floatval($item['total']);
            } else {
                $myItems[$i]['rods']   = 0;
                $myItems[$i]['sku']    = $item['sku'];
                $myItems[$i]['total']  = floatval($item['total']);
                /* Need to parse meta for information we want */
                $myItems[$i] += $this -> getMetaDetail($item['meta']);
                //echo '<p>' . var_dump($myItem[$i]) . '</p>';
                $i++;
            }
        }
        return($myItems);
    }

    /*
     * Process array of orders. An order will conist of one or more
     *     line items.
     * Return json line per booking entry
     * Add ROD Rental to associated booking
     */
    public function getBookingList($ordersArray) {
        $bookings = array();

        $orders = $ordersArray['orders'];
        $i = 0;
        foreach ($orders as $order){
            $booking = array();
            $items = array();
            //echo var_dump($order);
            $booking['status']     = $order['status'];
            $booking['id']         = $order['id'];
            $booking['first_name'] = $order['customer']['first_name'];
            $booking['last_name']  = $order['customer']['last_name'];
            $booking['phone']      = $order['customer']['billing_address']['phone'];
            $booking['phone']      = $this->formatPhoneNumber($booking['phone']);
            // booking order may have more than one item
            $items = $this -> getLineItemsDetail($order['line_items']);
            
            foreach ($items as $item){
                $bookings[$i++] = $booking + $item;
            }
        }

        usort( $bookings, 'Bookings::cmpOrderItems' );

        //echo '<p>' . json_encode($details) . '</p>';
        return ($bookings);
    }
    /*
     *  Get trip summary for each date with orders from booking detail.
     *  For each booking date, calcuate total Adults, Children, $
     *  Assumption: $detail list is ordered by 'Booking Date'
     */
    public function getBookingSummary($orders){
        $summary = array();
        
        $bookings = $this -> getBookingList($orders);

        $trip = array(
            'Date'     => $bookings[0]['BookingDate'],
            'Adults'   => 0,
            'Children' => 0,
            'rods'     => 0,
            'total'    => 0.00);

        $i = 0;
        foreach($bookings as $booking) {

            if($booking['BookingDate'] == $trip['Date']) {
                //echo '<p>' . '==' . $booking['BookingDate'] . '</p>';
                $trip['Adults']   += $booking['Adults'];
                $trip['Children'] += $booking['Children'];
                $trip['rods']     += $booking['rods'];
                $trip['total']    += $booking['total'];
            } else {
                // Save previous sums
                $summary[$i] = $trip;
                ++$i;
                $trip['Date']     = $booking['BookingDate'];
                $trip['Adults']   = $booking['Adults'];
                $trip['Children'] = $booking['Children'];
                $trip['rods']     = $booking['rods'];
                $trip['total']    = $booking['total'];
                // Save current
                $summary[$i] = $trip;
            }
        }
        return($summary);
    }

    /*
     *  Get trip summary from booking detail.
     *  For each booking date, calcuate total Adults, Children, $
     *  Assumption: $detail list is ordered by 'Booking Date'
     */
    public function getBookingSummaryTotals($summary){
        $totals = array();

        foreach($summary as $daily) {
            $totals['Adults']   += $daily['Adults'];
            $totals['Children'] += $daily['Children'];
            $totals['rods']     += $daily['rods'];
            $totals['total']    += $daily['total'];
        }
        return $totals;
    }
    /*
     * Return booking for each booking entry for a given date
     */
    public function getBookingsForDate($orders, $date) {
        $bookingsForDate = array();

        $bookings = $this -> getBookingList($orders);
        // Straight compare below did not work. Have to convert first
        $myDate = new DateTime($date);

        $i = 0;
        foreach ($bookings as $booking){
            if($myDate == new DateTime($booking['BookingDate'])) {
                //echo '<p>' . json_encode($booking) . '</p>';
                $bookingsForDate[$i++] = $booking;
            }
        }
        return ($bookingsForDate);
    }

}
?>